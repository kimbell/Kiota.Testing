// <auto-generated/>
using Bob.Kiota.Client2.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Bob.Kiota.Client2.WeatherForecast.Animals {
    /// <summary>
    /// Builds and executes requests for operations under \WeatherForecast\animals
    /// </summary>
    public class AnimalsRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="AnimalsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AnimalsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/WeatherForecast/animals", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="AnimalsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AnimalsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/WeatherForecast/animals", rawUrl)
        {
        }
        /// <summary>
        /// Gets animals
        /// </summary>
        /// <returns>A List&lt;Animals&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<Animals>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<Animals>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<Animals>(requestInfo, Animals.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.ToList();
        }
        /// <summary>
        /// Gets animals
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="AnimalsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public AnimalsRequestBuilder WithUrl(string rawUrl)
        {
            return new AnimalsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="Animal"/>, <see cref="Cat"/>, <see cref="Dog"/>
        /// </summary>
        public class Animals : IComposedTypeWrapper, IParsable 
        {
            /// <summary>Composed type representation for type <see cref="Bob.Kiota.Client2.Models.Animal"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Bob.Kiota.Client2.Models.Animal? Animal { get; set; }
#nullable restore
#else
            public Bob.Kiota.Client2.Models.Animal Animal { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="Bob.Kiota.Client2.Models.Cat"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Bob.Kiota.Client2.Models.Cat? Cat { get; set; }
#nullable restore
#else
            public Bob.Kiota.Client2.Models.Cat Cat { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="Bob.Kiota.Client2.Models.Dog"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Bob.Kiota.Client2.Models.Dog? Dog { get; set; }
#nullable restore
#else
            public Bob.Kiota.Client2.Models.Dog Dog { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="Animals"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static Animals CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("bob")?.GetStringValue();
                var result = new Animals();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Animal = new Bob.Kiota.Client2.Models.Animal();
                }
                else if("c".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Cat = new Bob.Kiota.Client2.Models.Cat();
                }
                else if("d".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Dog = new Bob.Kiota.Client2.Models.Dog();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Animal != null)
                {
                    return Animal.GetFieldDeserializers();
                }
                else if(Cat != null)
                {
                    return Cat.GetFieldDeserializers();
                }
                else if(Dog != null)
                {
                    return Dog.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Animal != null)
                {
                    writer.WriteObjectValue<Bob.Kiota.Client2.Models.Animal>(null, Animal);
                }
                else if(Cat != null)
                {
                    writer.WriteObjectValue<Bob.Kiota.Client2.Models.Cat>(null, Cat);
                }
                else if(Dog != null)
                {
                    writer.WriteObjectValue<Bob.Kiota.Client2.Models.Dog>(null, Dog);
                }
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class AnimalsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
    }
}
